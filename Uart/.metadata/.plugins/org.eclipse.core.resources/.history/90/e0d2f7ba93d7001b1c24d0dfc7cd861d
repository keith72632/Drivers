/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>


#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#define USART2 17
int main(void)
{
    //1. enable clock access to usart2 by identifying bus(apb1)
    //Rcc = 0x40023800
    uint32_t *pRccApb1 = (uint32_t *)0x40023840;
    *pRccApb1 &= ~(1 << USART2);
    *pRccApb1 |= (1 << USART2);
    //2. enable clock access to portA
    uint32_t *pRccAhb1 = (uint32_t *)0x40023830;
    *pRccAhb1 &= ~(0xffffffff);
    *pRccAhb1 |= (1 << 0);
    //3. enabnle pins for alternate functions, pa2 and pa3
    uint32_t *pGpioA = (uint32_t *)0x40020000;
    *pGpioA &= ~(3 << 4);
    *pGpioA &= ~(3 << 6); 
    *pGpioA |= (2 << 4) | (2 << 6);
    //4. configure type of alternate function
    uint32_t *pAfl = (uint32_t *)0x40020020;
    *pAfl |= (7 << 28);
    //configure usart2
    uint32_t *pUsartBrr = (uint32_t *)0x40004408;
    uint32_t *pUsartCr1 = (uint32_t *)0x4000440C;
    uint32_t *pUsartCr2 = (uint32_t *)0x40004410;
    uint32_t *pUsartCr3 = (uint32_t *)0x40004414;

    *pUsartBrr = 0x0683; //baudrate 11010000011 
    *pUsartCr1 = 0x000C; //8 bit data 1100
    *pUsartCr2 = 0x000; //default one stop bet
    *pUsartCr3 = 0x000;
    *pUsartCr1 = 0x2000; //enables 10000000000000

    //usart write function
    uint32_t *pUsartSr = (uint32_t *)0x40004400;
    uint32_t *pUsartDr = (uint32_t *)0x40004404;
    char ch = 'x';
    /* Loop forever */
	for(;;)
    {
        while(!(*pUsartSr & 0x0080)) //10000000
        {
            *pUsartDr = (ch & 0xff);
        }
    };
}
