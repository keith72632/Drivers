
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000430  08000430  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000430  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08000438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000028  08000460  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000460  00020044  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b40  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000026a  00000000  00000000  00020b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00020e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00020e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cae  00000000  00000000  00020ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000070c  00000000  00000000  00022b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007f34  00000000  00000000  000232a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002b1d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000144  00000000  00000000  0002b22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000408 	.word	0x08000408

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	08000408 	.word	0x08000408

080001e8 <led_init>:
uint32_t *pUsart_Cr1 = (uint32_t *)0x4000440C;
uint32_t *pGpioDMode = (uint32_t *)0x40020C00;
uint32_t *pGpioOut   = (uint32_t *)0x40020C14;

void led_init()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	*pAhb1 |= (1 << 3);
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <led_init+0x2c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <led_init+0x2c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f042 0208 	orr.w	r2, r2, #8
 80001fa:	601a      	str	r2, [r3, #0]
	*pGpioDMode |= (1 << 24);
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <led_init+0x30>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <led_init+0x30>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	20000000 	.word	0x20000000
 8000218:	20000020 	.word	0x20000020

0800021c <led_on>:

void led_on()
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	*pGpioOut |= (1 << 12);
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <led_on+0x1c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4b04      	ldr	r3, [pc, #16]	; (8000238 <led_on+0x1c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800022e:	601a      	str	r2, [r3, #0]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	20000024 	.word	0x20000024

0800023c <usart_init>:

void usart_init()
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
    *pAhb1 |= (1 << 0);
 8000240:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <usart_init+0x6c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <usart_init+0x6c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f042 0201 	orr.w	r2, r2, #1
 800024e:	601a      	str	r2, [r3, #0]
    *pApb  |= (1 << 17);
 8000250:	4b16      	ldr	r3, [pc, #88]	; (80002ac <usart_init+0x70>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <usart_init+0x70>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800025e:	601a      	str	r2, [r3, #0]
    *pAMode |= (2 << 4) | (2 << 6);
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <usart_init+0x74>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <usart_init+0x74>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800026e:	601a      	str	r2, [r3, #0]
    *AltFunc |= (7 << 8) | (7 << 12);
 8000270:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <usart_init+0x78>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <usart_init+0x78>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f442 42ee 	orr.w	r2, r2, #30464	; 0x7700
 800027e:	601a      	str	r2, [r3, #0]

    *pUsart_Brr = 0x0683;
 8000280:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <usart_init+0x7c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f240 6283 	movw	r2, #1667	; 0x683
 8000288:	601a      	str	r2, [r3, #0]
    *pUsart_Cr1 |= (1 << 2) | (1 << 3) | (1 << 13);
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <usart_init+0x80>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <usart_init+0x80>)
 8000292:	6812      	ldr	r2, [r2, #0]
 8000294:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000298:	f043 030c 	orr.w	r3, r3, #12
 800029c:	6013      	str	r3, [r2, #0]
}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000004 	.word	0x20000004
 80002b0:	20000008 	.word	0x20000008
 80002b4:	2000000c 	.word	0x2000000c
 80002b8:	20000018 	.word	0x20000018
 80002bc:	2000001c 	.word	0x2000001c

080002c0 <uart_write>:

void uart_write(uint8_t c)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
    while(!(*pUsart_Sr & 0x0080)){};
 80002ca:	bf00      	nop
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <uart_write+0x2c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f8      	beq.n	80002cc <uart_write+0xc>
    *pUsart_Dr = c;
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <uart_write+0x30>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	79fa      	ldrb	r2, [r7, #7]
 80002e0:	601a      	str	r2, [r3, #0]
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	20000010 	.word	0x20000010
 80002f0:	20000014 	.word	0x20000014

080002f4 <uart_read>:
    }
    while(!(*pUsart_Sr & 0x0040)){};
}

uint8_t uart_read()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	while(!(*pUsart_Sr & 0x0020)){};
 80002f8:	bf00      	nop
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <uart_read+0x24>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f8      	beq.n	80002fa <uart_read+0x6>
	return *pUsart_Dr;
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <uart_read+0x28>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	b2db      	uxtb	r3, r3
}
 8000310:	4618      	mov	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	20000010 	.word	0x20000010
 800031c:	20000014 	.word	0x20000014

08000320 <main>:


int main(void)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
    usart_init();
 8000326:	f7ff ff89 	bl	800023c <usart_init>
    led_init();
 800032a:	f7ff ff5d 	bl	80001e8 <led_init>
    char string[] = "hello world\0";
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <main+0x3c>)
 8000330:	463c      	mov	r4, r7
 8000332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000334:	c407      	stmia	r4!, {r0, r1, r2}
 8000336:	7023      	strb	r3, [r4, #0]
    //uart_write_string(string);
	char b = 'x';
 8000338:	2378      	movs	r3, #120	; 0x78
 800033a:	73fb      	strb	r3, [r7, #15]
	uart_write(b);
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ffbe 	bl	80002c0 <uart_write>

	while(1){
	    char c = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	73bb      	strb	r3, [r7, #14]
	    c = uart_read();
 8000348:	f7ff ffd4 	bl	80002f4 <uart_read>
 800034c:	4603      	mov	r3, r0
 800034e:	73bb      	strb	r3, [r7, #14]
	    if(c == 1)led_on();
 8000350:	7bbb      	ldrb	r3, [r7, #14]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d1f6      	bne.n	8000344 <main+0x24>
 8000356:	f7ff ff61 	bl	800021c <led_on>
	while(1){
 800035a:	e7f3      	b.n	8000344 <main+0x24>
 800035c:	08000420 	.word	0x08000420

08000360 <USART2_IRQHandler>:
	};
}

void USART2_IRQHandler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	led_on();
 8000364:	f7ff ff5a 	bl	800021c <led_on>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039a:	f000 f811 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ffbf 	bl	8000320 <main>

080003a2 <LoopForever>:

LoopForever:
    b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80003b0:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80003b4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80003b8:	20000044 	.word	0x20000044

080003bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC_IRQHandler>
	...

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	; (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	; (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	; (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	; (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000430 	.word	0x08000430
 80003fc:	08000430 	.word	0x08000430
 8000400:	08000430 	.word	0x08000430
 8000404:	08000434 	.word	0x08000434

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
