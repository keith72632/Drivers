
00_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003cc  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b6d  00000000  00000000  000103f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ed  00000000  00000000  00010f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00011150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000038  00000000  00000000  000111a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cb8  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000641  00000000  00000000  00012e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007fe9  00000000  00000000  000134d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001b4ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  0001b510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003ac 	.word	0x080003ac

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003ac 	.word	0x080003ac

080001e8 <main>:
void USART_Init()
{

}
int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b08d      	sub	sp, #52	; 0x34
 80001ec:	af00      	add	r7, sp, #0
	UsartHandler->pUSARTx = (USART_RegDef_t *)0x40004400;
 80001ee:	4b3d      	ldr	r3, [pc, #244]	; (80002e4 <main+0xfc>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a3d      	ldr	r2, [pc, #244]	; (80002e8 <main+0x100>)
 80001f4:	601a      	str	r2, [r3, #0]
    //1. enable clock access to usart2 by identifying bus(apb1)
    //Rcc = 0x40023800
    uint32_t *pRccApb1 = (uint32_t *)0x40023840;
 80001f6:	4b3d      	ldr	r3, [pc, #244]	; (80002ec <main+0x104>)
 80001f8:	62bb      	str	r3, [r7, #40]	; 0x28
    *pRccApb1 &= ~(1 << USART2);
 80001fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000204:	601a      	str	r2, [r3, #0]
    *pRccApb1 |= (1 << USART2);
 8000206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800020e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000210:	601a      	str	r2, [r3, #0]
    //2. enable clock access to portA
    uint32_t *pRccAhb1 = (uint32_t *)0x40023830;
 8000212:	4b37      	ldr	r3, [pc, #220]	; (80002f0 <main+0x108>)
 8000214:	627b      	str	r3, [r7, #36]	; 0x24
    *pRccAhb1 &= ~(0xffffffff);
 8000216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
    *pRccAhb1 |= (1 << 0);
 800021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f043 0201 	orr.w	r2, r3, #1
 8000224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000226:	601a      	str	r2, [r3, #0]
    //3. enabnle pins for alternate functions, pa2 and pa3
    uint32_t *pGpioA = (uint32_t *)0x40020000;
 8000228:	4b32      	ldr	r3, [pc, #200]	; (80002f4 <main+0x10c>)
 800022a:	623b      	str	r3, [r7, #32]
    *pGpioA |= (2 << 4) | (2 << 6);
 800022c:	6a3b      	ldr	r3, [r7, #32]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8000234:	6a3b      	ldr	r3, [r7, #32]
 8000236:	601a      	str	r2, [r3, #0]

    //speed resgister 
    uint32_t *pGpioSpeed = (uint32_t *)0x40020008;
 8000238:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <main+0x110>)
 800023a:	61fb      	str	r3, [r7, #28]
    *pGpioSpeed |= (3 << 4) | (3 << 6);
 800023c:	69fb      	ldr	r3, [r7, #28]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f043 02f0 	orr.w	r2, r3, #240	; 0xf0
 8000244:	69fb      	ldr	r3, [r7, #28]
 8000246:	601a      	str	r2, [r3, #0]
    //4. configure type of alternate function
    uint32_t *pAfl = (uint32_t *)0x40020020;
 8000248:	4b2c      	ldr	r3, [pc, #176]	; (80002fc <main+0x114>)
 800024a:	61bb      	str	r3, [r7, #24]
    *pAfl |= (7 << 8) | (7 << 12);
 800024c:	69bb      	ldr	r3, [r7, #24]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f443 42ee 	orr.w	r2, r3, #30464	; 0x7700
 8000254:	69bb      	ldr	r3, [r7, #24]
 8000256:	601a      	str	r2, [r3, #0]
    //configure usart2
    uint32_t *pUsartBrr = (uint32_t *)0x40004408;
 8000258:	4b29      	ldr	r3, [pc, #164]	; (8000300 <main+0x118>)
 800025a:	617b      	str	r3, [r7, #20]
    uint32_t *pUsartCr1 = (uint32_t *)0x4000440C;
 800025c:	4b29      	ldr	r3, [pc, #164]	; (8000304 <main+0x11c>)
 800025e:	613b      	str	r3, [r7, #16]

    *pUsartCr1 = 0x00;
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
    *pUsartCr1 |= (1 << 13); // set Uart Enable bit
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	601a      	str	r2, [r3, #0]
    *pUsartCr1 &= ~(1 << 12); //M bit, word length
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	601a      	str	r2, [r3, #0]
    *pUsartBrr |= (3 << 0) | (104 << 4);// 0x0683 baud rate 9600
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8000286:	f043 0303 	orr.w	r3, r3, #3
 800028a:	697a      	ldr	r2, [r7, #20]
 800028c:	6013      	str	r3, [r2, #0]
    *pUsartCr1 |= (1 << 2); //enables the reciever
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f043 0204 	orr.w	r2, r3, #4
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	601a      	str	r2, [r3, #0]
    *pUsartCr1 |= (1 << 3); //enables the transmittor
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f043 0208 	orr.w	r2, r3, #8
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	601a      	str	r2, [r3, #0]
    *pUsartCr2 = 0x000; //default one stop bet
    *pUsartCr3 = 0x000;
    *pUsartCr1 |= 0x2000; //enables 10000000000000
#endif
    //usart write function
    uint32_t *pUsartSr = (uint32_t *)0x40004400;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <main+0x100>)
 80002a8:	60fb      	str	r3, [r7, #12]
    uint32_t *pUsartDr = (uint32_t *)0x40004404;
 80002aa:	4b17      	ldr	r3, [pc, #92]	; (8000308 <main+0x120>)
 80002ac:	60bb      	str	r3, [r7, #8]
    char ch = 'x';
 80002ae:	2378      	movs	r3, #120	; 0x78
 80002b0:	71fb      	strb	r3, [r7, #7]
    
    /* Loop forever */
    while(1)
    {
    	//*pUsartDr = ch;
        while(!(UsartHandler->pUSARTx->USART_DR & (1 << 8)))
 80002b2:	e00e      	b.n	80002d2 <main+0xea>
        	{
        		UsartHandler->pUSARTx->USART_DR = ch;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <main+0xfc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	605a      	str	r2, [r3, #4]
        		for(int i = 0; i < 100000; i++);
 80002be:	2300      	movs	r3, #0
 80002c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002c2:	e002      	b.n	80002ca <main+0xe2>
 80002c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c6:	3301      	adds	r3, #1
 80002c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002cc:	4a0f      	ldr	r2, [pc, #60]	; (800030c <main+0x124>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	ddf8      	ble.n	80002c4 <main+0xdc>
        while(!(UsartHandler->pUSARTx->USART_DR & (1 << 8)))
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <main+0xfc>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0e8      	beq.n	80002b4 <main+0xcc>
 80002e2:	e7f6      	b.n	80002d2 <main+0xea>
 80002e4:	2000001c 	.word	0x2000001c
 80002e8:	40004400 	.word	0x40004400
 80002ec:	40023840 	.word	0x40023840
 80002f0:	40023830 	.word	0x40023830
 80002f4:	40020000 	.word	0x40020000
 80002f8:	40020008 	.word	0x40020008
 80002fc:	40020020 	.word	0x40020020
 8000300:	40004408 	.word	0x40004408
 8000304:	4000440c 	.word	0x4000440c
 8000308:	40004404 	.word	0x40004404
 800030c:	0001869f 	.word	0x0001869f

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	; (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	; (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 f811 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ff51 	bl	80001e8 <main>

08000346 <LoopForever>:

LoopForever:
    b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	20000020 	.word	0x20000020

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	; (800039c <__libc_init_array+0x38>)
 8000368:	4c0d      	ldr	r4, [pc, #52]	; (80003a0 <__libc_init_array+0x3c>)
 800036a:	1b64      	subs	r4, r4, r5
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	2600      	movs	r6, #0
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	; (80003a4 <__libc_init_array+0x40>)
 8000376:	4c0c      	ldr	r4, [pc, #48]	; (80003a8 <__libc_init_array+0x44>)
 8000378:	f000 f818 	bl	80003ac <_init>
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	2600      	movs	r6, #0
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
